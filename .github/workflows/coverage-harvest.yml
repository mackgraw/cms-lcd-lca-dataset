name: Coverage Harvest

on:
  
  workflow_dispatch: {}
    schedule:
    # 7:00 UTC daily (â‰ˆ3:00 AM America/New_York while on EDT)
     - cron: "0 7 * * *"
    # Manual run with knobs you can tweak from the UI
    inputs:
      states:
        description: 'Filter by states (comma-separated, optional)'
        required: false
        default: ''
      status:
        description: 'Filter by status (e.g., Active, optional)'
        required: false
        default: ''
      contractors:
        description: 'Filter by contractors (comma-separated, optional)'
        required: false
        default: ''
      max_docs:
        description: 'Limit how many docs to process (blank = all)'
        required: false
        default: ''
      timeout:
        description: 'HTTP timeout seconds (default 30)'
        required: false
        default: '30'

  # Re-run automatically when the harvester or requirements change
  push:
    paths:
      - 'scripts/**'
      - 'requirements.txt'
      - '.github/workflows/coverage-harvest.yml'

jobs:
  harvest:
    runs-on: ubuntu-latest
    timeout-minutes: 1000
    # OPTION A: remove this line to use the default 6h limit
    # OPTION B: or set something higher, e.g. 360 = 6 hours
    # timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests tenacity
          fi

      - name: Run harvester
        env:
          COVERAGE_STATES: ${{ inputs.states }}
          COVERAGE_STATUS: ${{ inputs.status }}
          COVERAGE_CONTRACTORS: ${{ inputs.contractors }}
          COVERAGE_MAX_DOCS: ${{ inputs.max_docs }}
          COVERAGE_TIMEOUT: ${{ inputs.timeout }}
        run: |
          python -m scripts.run_once
          echo "Run completed."

      - name: Upload codes CSV
        uses: actions/upload-artifact@v4
        with:
          name: document_codes_latest
          path: dataset/document_codes_latest.csv
          if-no-files-found: error

      - name: Upload document_nocodes_latest.csv (if exists)
        if: ${{ hashFiles('dataset/document_nocodes_latest.csv') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: document_nocodes_latest
          path: dataset/document_nocodes_latest.csv
        
